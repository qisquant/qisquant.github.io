y <- btm$zcp[btm$pyear == years[t]]
X <- cbind(rep(1, length(y)),
btm$EXMKT[btm$pyear == years[t]])
capm_output.btm[t,] <- solve(t(X) %*% X, t(X) %*% y)
# Fama-French regressions
#  size:
y <- size$zcp[size$pyear == years[t]]
X <- cbind(rep(1, length(y)),
size$EXMKT[size$pyear == years[t]],
size$SMB[size$pyear == years[t]],
size$HML[size$pyear == years[t]])
ff_output.size[t,] <- solve(t(X) %*% X, t(X) %*% y)
#  btm:
y <- btm$zcp[btm$pyear == years[t]]
X <- cbind(rep(1, length(y)),
btm$EXMKT[btm$pyear == years[t]],
btm$SMB[btm$pyear == years[t]],
btm$HML[btm$pyear == years[t]])
ff_output.btm[t,] <- solve(t(X) %*% X, t(X) %*% y)
}
ff_output.btm
ff_output.size[
]
# calculate average coefficients and test for significance
#  CAPM:
#   size:
capm_mean.size = apply(capm_output.size, 2, mean)
capm_sd.size = apply(capm_output.size, 2, sd)
capm_se.size = capm_sd.size / sqrt(nyear)
capm_t.size = capm_mean.size / capm_se.size
#   btm:
capm_mean.btm = apply(capm_output.btm, 2, mean)
capm_sd.btm = apply(capm_output.btm, 2, sd)
capm_se.btm = capm_sd.btm / sqrt(nyear)
capm_t.btm = capm_mean.btm / capm_se.btm
capm_mean.size
capm_sd.size
capm_se.size
capm_t.size
#  Fama-French:
#   size:
ff_mean.size = apply(ff_output.size, 2, mean)
ff_sd.size = apply(ff_output.size, 2, sd)
ff_se.size = ff_sd.size / sqrt(nyear)
ff_t.size = ff_mean.size / ff_se.size
#   btm:
ff_mean.btm = apply(ff_output.btm, 2, mean)
ff_sd.btm = apply(ff_output.btm, 2, sd)
ff_se.btm = ff_sd.btm / sqrt(nyear)
ff_t.btm = ff_mean.btm / ff_se.btm
# group and print results
print("Size Portfolio CAPM Results")
print(rbind(mean=capm_mean.size, "t-stat"=capm_t.size))
print("Book-to-Market Portfolio CAPM Results")
print(rbind(mean=capm_mean.btm, "t-stat"=capm_t.btm))
print("Size Portfolio Fama-French Results")
print(rbind(mean=ff_mean.size, "t-stat"=ff_t.size))
print("Book-to-Market Portfolio Fama-French Results")
print(rbind(mean=ff_mean.btm, "t-stat"=ff_t.btm))
setwd('/Users/boris/Dropbox/code/r/junk/dthielke')
# read the data
crsp <- read.csv("data/crsp.csv", header=TRUE)
# read the data
crsp <- read.csv("crsp.csv", header=TRUE)
head(crsp)
# separate YYYYMMDD dates into years, months and days
crsp$year <- as.numeric(substr(as.character(crsp$DATE), 1, 4))
crsp$month <- as.numeric(substr(as.character(crsp$DATE), 5, 6))
crsp$day <- as.numeric(substr(as.character(crsp$DATE), 7, 8))
crsp$DATE <- NULL
head(crsps)
head(crsp)
head(crsp)
nrow(crsp)
# keep only stocks listed on NYSE (1), AMEX (2) or NASDAQ (3)
crsp <- crsp[crsp$EXCHCD >= 1 & crsp$EXCHCD <= 3,]
nrow(crsp)
# keep only ordinary stocks (share code 11)
crsp <- crsp[crsp$SHRCD == 11,]
nrow(crsp)
# keep only non-financial stocks
crsp <- crsp[crsp$SICCD < 6000 | crsp$SICCD > 6999,]
nrow(crsp)
# remove any duplicate observations for a given stock in a given month
crsp <- crsp[!duplicated(crsp[, c("month", "year", "PERMNO")]),]
nrow(crsp)
# count the number of stocks
crsp$PERMNO <- factor(crsp$PERMNO)
stocks <- levels(crsp$PERMNO)
nstock <- length(stocks)
nstock
stocks
destring <- function(x, columns=names(crsp)) {
tmp <- x
tmp[, columns] <- suppressWarnings(lapply(lapply(x[, columns], as.character), as.numeric))
return (tmp)
}
crsp <- destring(crsp, c("RET", "RETX", "DLRET", "DLRETX", "PRC", "VOL", "SHROUT"))
nrow(crsp)
# replace missing returns with delisting returns
crsp$RET[is.na(crsp$RET)] <- crsp$DLRET[is.na(crsp$RET)]
crsp$RETX[is.na(crsp$RETX)] <- crsp$DLRETX[is.na(crsp$RETX)]
# remove unused data
crsp$DLRET <- NULL
crsp$DLRETX <- NULL
crsp$SHRCD <- NULL
crsp$SICCD <- NULL
# remove observations with missing returns
crsp <- crsp[!is.na(crsp$RET) & !is.na(crsp$RETX),]
# calculate portfolio datescrsp
crsp$pyear <- ifelse(crsp$month < 7, crsp$year - 1, crsp$year)
crsp$pmonth <- ifelse(crsp$month < 7, crsp$month + 6, crsp$month - 6)
crsp
# calculate market capitalization
## june only
junes <- crsp$month == 6
size <- data.frame(PERMNO=crsp$PERMNO[junes], pyear=crsp$year[junes], EXCHCD=crsp$EXCHCD[junes], mktcap=(crsp$SHROUT[junes] * abs(crsp$PRC[junes])))
crsp <- merge(crsp, size, by=c("PERMNO", "pyear"))
size
# sort the cleaned data and remove unused variables
crsp.clean <- crsp[order(crsp$PERMNO, crsp$year, crsp$month),]
# sort the cleaned data and remove unused variables
crsp.clean <- crsp[order(crsp$PERMNO, crsp$year, crsp$month),]
# calculate lagged monthly market cap
crsp.clean$lagmktcap <- crsp.clean$SHROUT * abs(crsp.clean$PRC)
crsp.clean
head(crsp.clean)
for (i in stocks) {
rows <- crsp.clean$PERMNO == i
months <- crsp.clean$month[rows]
nmonth <- length(months)
crsp.clean$lagmktcap[rows][-1] <- ifelse((months[-1] == (months[-nmonth] + 1) %% 12) | (months[-nmonth] == 11 & months[-1] == 12), crsp.clean$lagmktcap[rows][-nmonth], rep(NA, nmonth-1))
crsp.clean$lagmktcap[rows][1] <- NA
}
trailing.compound.return <- function(ret, from, to) {
nper <- length(ret)
# take advantage of cumsum to greatly speed up calculations
cum.ret <- cumsum(log(1 + ret))
compound.ret <- vector(mode="numeric", length=nper)
compound.ret[1:from] <- NA
compound.ret[from + 1] <- cum.ret[from - to + 1]
# use indexing to subtract cumulative sums rather than looping
compound.ret[(from + 2):nper] <- cum.ret[(from - to + 2):(nper - to)] - cum.ret[1:(nper - from - 1)]
return (exp(compound.ret) - 1)
}
tic <- proc.time()
for (i in stocks) {
crsp.clean$momentum[crsp.clean$PERMNO == i] <- trailing.compound.return(crsp.clean$RET[crsp.clean$PERMNO == i], 12, 2)
crsp.clean$reversal[crsp.clean$PERMNO == i] <- trailing.compound.return(crsp.clean$RET[crsp.clean$PERMNO == i], 60, 13)
}
toc <- proc.time()
print(toc - tic) # time momentum/reversal calculations
# save the results
save(crsp.clean, file="smr.Rdata")
save(size, file="size.Rdata")
setwd('/Users/boris/Dropbox/code/r/junk/dthielke')
# load the data and rename columns
comp <- read.csv("crsp.csv", header=TRUE)
names(comp) <- tolower(names(comp))
head(comp)
# load the data and rename columns
comp <- read.csv("crsp.csv", header=TRUE)
names(comp) <- tolower(names(comp))
names(comp)[2] <- "permno"
names(comp)[4] <- "year"
head(comp)
# use cusip to remove non-ordinary shares
comp$cusip <- as.character(comp$cusip)
nchar <- nchar(comp$cusip)
nchar
comp
comp <- comp[nchar >= 8,]
comp
comp
# load the data and rename columns
comp <- read.csv("crsp.csv", header=TRUE)
names(comp) <- tolower(names(comp))
names(comp)[2] <- "permno"
names(comp)[4] <- "year"
# load the data and rename columns
comp <- read.csv("crsp1.csv", header=TRUE)
head(crsp1)
# load the data and rename columns
comp <- read.csv("crsp1.csv", header=TRUE)
head(comp)
names(comp) <- tolower(names(comp))
names(comp)[2] <- "permno"
names(comp)[4] <- "year"
head(comp)
nrow(comp)
# use cusip to remove non-ordinary shares
comp$cusip <- as.character(comp$cusip)
nchar <- nchar(comp$cusip)
nchar
comp <- comp[nchar >= 8,]
comp$cusip[nchar == 8] <- paste("0", comp$cusip[nchar == 8], sep="")
comp$cic <- substr(comp$cusip, 7, 8)
comp <- comp[comp$cic == "10" | comp$cic == "11",]
comp$cusip <- NULL
head(comp)
# remove financial stocks based on SIC
comp$sich <- ifelse(is.na(comp$sich), comp$sic, comp$sich)
comp <- comp[comp$sich < 6000 | comp$sich > 6999,]
comp$sic <- NULL
comp$sich <- NULL
# remove duplicate entries
comp <- comp[!duplicated(comp[, c("year", "permno")]),]
destring <- function(x, columns=names(crsp)) {
tmp <- x
tmp[, columns] <- suppressWarnings(lapply(lapply(x[, columns], as.character), as.numeric))
return (tmp)
}
comp <- destring(comp, c("act", "at", "che", "csho", "dlc", "dp", "dvp", "ib", "lct", "lt",
"pstkl", "pstkrv", "txdi", "txditc", "upstk", "adjex_f"))
best.available <- function(x) {
if (is.null(dim(x))) {
return (ifelse(is.na(x), 0, x))
} else {
best <- apply(x, MARGIN=1, FUN=best.available.helper)
return (best)
}
}
best.available.helper <- function(row) {
best <- which(row != 0)[1]
if (is.na(best))
return (0)
else
return (row[best])
}
comp$at
comp$lt
comp$txditc
best.available(comp$txditc)
# calculate book equity (in millions)
comp$be <- comp$at - comp$lt + best.available(comp$txditc) - best.available(cbind(comp$pstkl, comp$pstkrv, comp$upstk))
comp$be
# calculate profitability (ROA)
comp$roa <- (comp$ib - best.available(comp$dvp) + best.available(comp$txdi)) / comp$at
stocks <- levels(factor(comp$permno))
stocks
for (s in stocks) {
stock <- comp$permno == s # row indices of stock
len <- length(comp[stock,1]) # number of periods for this stock
trim <- len - 1 # used to trim the last entry (since we are dealing with y-1 and y-2)
# calculate asset growth
at <- comp$at[stock]
comp$agr[stock][2:len] <- (diff(at) / at[-len])
# calculate net stock issues
shares <- comp$csho[stock] * comp$adjex_f[stock]
comp$nsi[stock][2:len] <- (shares[-1] / shares[-len])
# calculate accruals
dp <- comp$dp[stock]
comp$acc[stock][2:len] <- ((
diff(comp$act[stock]) -
diff(comp$lct[stock]) -
diff(comp$che[stock]) +
diff(comp$dlc[stock]) -
dp[-1]) / at[-len])
}
# load CRSP data
load("data/smr.Rdata")
# load CRSP data
load("smr.Rdata")
names(crsp.clean) <- tolower(names(crsp.clean))
# grab december data only
crsp <- crsp.clean[crsp.clean$month == 12, c("permno", "year", "month", "prc", "shrout")]
# calculate december market caps
crsp$mktcap <- abs(crsp$prc) * crsp$shrout / 1000
# merge the results back in
comp <- merge(comp, crsp, by=c("permno", "year"))
# calculate book to market equity ratios
comp$btm <- comp$be / comp$mktcap
comp$btm[comp$btm < 0] <- NA
# save the results
comp <- comp[,c("permno","year","month", "be","roa","agr","nsi","acc","btm","mktcap")]
save(comp, file="comp.RData")
setwd('/Users/boris/Dropbox/code/r/junk/dthielke')
# load the data
load('data/comp.RData')
load('data/smr.Rdata')
load('data/size.Rdata')
# calculate pyear for accounting data
comp$pyear <- comp$year + 1
comp$year <- NULL
comp$month <- NULL
comp$mktcap <- NULL
comp
# load the data
load('data/comp.RData')
# load the data
load('comp.RData')
load('smr.Rdata')
load('size.Rdata')
# calculate pyear for accounting data
comp$pyear <- comp$year + 1
comp$year <- NULL
comp$month <- NULL
comp$mktcap <- NULL
comp
# prepare the returns data
crsp.clean$pmonth <- ifelse(crsp.clean$month < 7, crsp.clean$month + 6, crsp.clean$month - 6)
returns <- crsp.clean[, c('PERMNO', 'pyear', 'pmonth', 'year', 'month', 'mktcap', 'lagmktcap', 'momentum', 'reversal', 'RET', 'EXCHCD')]
names(returns) <- tolower(names(returns))
returns$size <- returns$mktcap
returns$mom <- returns$momentum
returns$rev <- returns$reversal
returns$mktcap <- NULL
returns$momentum <- NULL
returns$reversal <- NULL
head(returns)
# prepare the returns data
crsp.clean$pmonth <- ifelse(crsp.clean$month < 7, crsp.clean$month + 6, crsp.clean$month - 6)
returns <- crsp.clean[, c('PERMNO', 'pyear', 'pmonth', 'year', 'month', 'mktcap', 'lagmktcap', 'momentum', 'reversal', 'RET', 'EXCHCD')]
crsp.clean
head(crsp.clean)
# Homework 3
# David Thielke, Dejing Huang, Michael Casini, Chris Penney
setwd('/Users/boris/Dropbox/code/r/junk/dthielke')
head(comp)
nrow(comp)
# load the data and rename columns
comp <- read.csv("crsp1.csv", header=TRUE)
names(comp) <- tolower(names(comp))
names(comp)[2] <- "permno"
names(comp)[4] <- "year"
# use cusip to remove non-ordinary shares
comp$cusip <- as.character(comp$cusip)
nchar <- nchar(comp$cusip)
comp <- comp[nchar >= 8,]
comp$cusip[nchar == 8] <- paste("0", comp$cusip[nchar == 8], sep="")
comp$cic <- substr(comp$cusip, 7, 8)
comp <- comp[comp$cic == "10" | comp$cic == "11",]
comp$cusip <- NULL
# remove financial stocks based on SIC
comp$sich <- ifelse(is.na(comp$sich), comp$sic, comp$sich)
comp <- comp[comp$sich < 6000 | comp$sich > 6999,]
comp$sic <- NULL
comp$sich <- NULL
# remove duplicate entries
comp <- comp[!duplicated(comp[, c("year", "permno")]),]
# remove any characters from key values
destring <- function(x, columns=names(crsp)) {
tmp <- x
tmp[, columns] <- suppressWarnings(lapply(lapply(x[, columns], as.character), as.numeric))
return (tmp)
}
comp <- destring(comp, c("act", "at", "che", "csho", "dlc", "dp", "dvp", "ib", "lct", "lt",
"pstkl", "pstkrv", "txdi", "txditc", "upstk", "adjex_f"))
# reduces columns of a matrix into a single vector, choosing the first value of each row
# from left to right that is non-zero and not missing
best.available <- function(x) {
if (is.null(dim(x))) {
return (ifelse(is.na(x), 0, x))
} else {
best <- apply(x, MARGIN=1, FUN=best.available.helper)
return (best)
}
}
# helper function for best.available
best.available.helper <- function(row) {
best <- which(row != 0)[1]
if (is.na(best))
return (0)
else
return (row[best])
}
# calculate book equity (in millions)
comp$be <- comp$at - comp$lt + best.available(comp$txditc) - best.available(cbind(comp$pstkl, comp$pstkrv, comp$upstk))
# calculate profitability (ROA)
comp$roa <- (comp$ib - best.available(comp$dvp) + best.available(comp$txdi)) / comp$at
stocks <- levels(factor(comp$permno))
for (s in stocks) {
stock <- comp$permno == s # row indices of stock
len <- length(comp[stock,1]) # number of periods for this stock
trim <- len - 1 # used to trim the last entry (since we are dealing with y-1 and y-2)
# calculate asset growth
at <- comp$at[stock]
comp$agr[stock][2:len] <- (diff(at) / at[-len])
# calculate net stock issues
shares <- comp$csho[stock] * comp$adjex_f[stock]
comp$nsi[stock][2:len] <- (shares[-1] / shares[-len])
# calculate accruals
dp <- comp$dp[stock]
comp$acc[stock][2:len] <- ((
diff(comp$act[stock]) -
diff(comp$lct[stock]) -
diff(comp$che[stock]) +
diff(comp$dlc[stock]) -
dp[-1]) / at[-len])
}
# load CRSP data
load("smr.Rdata")
names(crsp.clean) <- tolower(names(crsp.clean))
# grab december data only
crsp <- crsp.clean[crsp.clean$month == 12, c("permno", "year", "month", "prc", "shrout")]
# calculate december market caps
crsp$mktcap <- abs(crsp$prc) * crsp$shrout / 1000
# merge the results back in
comp <- merge(comp, crsp, by=c("permno", "year"))
# calculate book to market equity ratios
comp$btm <- comp$be / comp$mktcap
comp$btm[comp$btm < 0] <- NA
# save the results
comp <- comp[,c("permno","year","month", "be","roa","agr","nsi","acc","btm","mktcap")]
save(comp, file="comp.RData")
setwd('/Users/boris/Dropbox/code/r/junk/dthielke')
# load the data
load('comp.RData')
load('smr.Rdata')
load('size.Rdata')
# calculate pyear for accounting data
comp$pyear <- comp$year + 1
comp$year <- NULL
comp$month <- NULL
comp$mktcap <- NULL
# prepare the returns data
crsp.clean$pmonth <- ifelse(crsp.clean$month < 7, crsp.clean$month + 6, crsp.clean$month - 6)
returns <- crsp.clean[, c('PERMNO', 'pyear', 'pmonth', 'year', 'month', 'mktcap', 'lagmktcap', 'momentum', 'reversal', 'RET', 'EXCHCD')]
crsp.clean
head(√)
head(crsp.clean)
install.packages("blogdown")
blogdown::install_hugo()
setwd('/Users/boris/Desktop/qis/web')
getwd()
blogdown::new_site()
blogdown::install_theme('gcushen/hugo-academic')
#+ setup, include=FALSE
library(knitr)
source('~/.active-rstudio-document')
#' This is a special R script which can be used to generate a report. You can
#' write normal text in roxygen comments.
#'
#' First we set up some options (you do not have to do this):
#+ setup, include=FALSE
library(knitr)
opts_chunk$set(fig.path = 'figure/silk-')
#' The report begins here.
#+ test-a, cache=FALSE
# boring examples as usual
set.seed(123)
x = rnorm(5)
mean(x)
#' You can use the special syntax {{code}} to embed inline expressions, e.g.
{{mean(x) + 2}}
#' is the mean of x plus 2.
#' The code itself may contain braces, but these are not checked.  Thus,
#' perfectly valid (though very strange) R code such as `{{2 + 3}} - {{4 - 5}}`
#' can lead to errors because `2 + 3}} - {{4 - 5` will be treated as inline code.
#'
#' Now we continue writing the report. We can draw plots as well.
#+ test-b, fig.width=5, fig.height=5
par(mar = c(4, 4, .1, .1)); plot(x)
#' Actually you do not have to write chunk options, in which case knitr will use
#' default options. For example, the code below has no options attached:
var(x)
quantile(x)
#' And you can also write two chunks successively like this:
#+ test-chisq5
sum(x^2) # chi-square distribution with df 5
#+ test-chisq4
sum((x - mean(x))^2) # df is 4 now
#' Done. Call spin('knitr-spin.R') to make silk from sow's ear now and knit a
#' lovely purse.
# /* you can write comments between /* and */ like C comments (the preceding #
# is optional)
Sys.sleep(60)
gwtpwd()
getpwd()
setwd("~/Documents/GitHub/systrader.github.io/_posts")
getwd()
spin('test1.R')
devtools::install_github('systematicinvestor/SIT.date')
install.packages("devtools")
devtools::install_github('systematicinvestor/SIT.date')
install.packages("curl")
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages("curl")
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
devtools::install_github('systematicinvestor/SIT.date')
download.file('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
?SIT
library(SIT)
plota
# Run plota test
plota.test()
{% highlight r %}
#*****************************************************************
# Load historical data
#*****************************************************************
library(SIT)
load.packages('quantmod')
fx = get.G10()
nperiods = nrow(fx)
# Check data, plot FX vols
ret = diff(log(fx))
hist.vol = sqrt(252) * bt.apply.matrix(ret, runSD, n = 20)
plota.matplot(hist.vol,main='FX Vol')
{% endhighlight %}
turbulence = fx[,1] * NA
colnames(turbulence) = 'turbulence'
ret = coredata(fx / mlag(fx) - 1)
look.back = 252
for( i in (look.back+1) : nperiods ) {
temp = ret[(i - look.back + 1):(i-1), ]
# measures turbulence for the current observation
turbulence[i] = mahalanobis(ret[i,], colMeans(temp), cov(temp))
}
# DEXSZUS - Switzerland/U.S.
print(to.nice(cbind(fx,turbulence)['2015-01-14::2015-01-16',]))
